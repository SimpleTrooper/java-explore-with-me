CREATE TABLE IF NOT EXISTS users (
    user_id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    username VARCHAR(100) NOT NULL UNIQUE,
    email VARCHAR(50) UNIQUE NOT NULL UNIQUE,
    version BIGINT,
    CONSTRAINT pk_users PRIMARY KEY(user_id),
    CONSTRAINT uq_user_email UNIQUE (email)
)^;

CREATE TABLE IF NOT EXISTS categories (
    category_id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    category_name VARCHAR(100) NOT NULL UNIQUE,
    version BIGINT,
    CONSTRAINT pk_categories PRIMARY KEY(category_id)
)^;

CREATE TABLE IF NOT EXISTS events (
    event_id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    title VARCHAR(100) NOT NULL,
    annotation VARCHAR (1000),
    description TEXT,
    event_date TIMESTAMP NOT NULL,
    category_id BIGINT NOT NULL,
    user_id BIGINT NOT NULL,
    location_lat FLOAT,
    location_lon FLOAT,
    paid BOOLEAN NOT NULL,
    participant_limit INT,
    request_moderation BOOLEAN NOT NULL,
    created TIMESTAMP NOT NULL,
    event_state VARCHAR(30) NOT NULL,
    published TIMESTAMP,
    confirmed_requests BIGINT NOT NULL,
    version BIGINT,
    CONSTRAINT pk_events PRIMARY KEY(event_id),
    CONSTRAINT fk_events_categories FOREIGN KEY(category_id) REFERENCES categories(category_id),
    CONSTRAINT fk_events_users FOREIGN KEY(user_id) REFERENCES users(user_id)
)^;

CREATE TABLE IF NOT EXISTS requests (
    request_id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    request_state VARCHAR(100) NOT NULL,
    created TIMESTAMP,
    user_id BIGINT NOT NULL,
    event_id BIGINT NOT NULL,
    version BIGINT,
    CONSTRAINT pk_requests PRIMARY KEY(request_id),
    CONSTRAINT fk_requests_events FOREIGN KEY(event_id) REFERENCES events(event_id),
    CONSTRAINT fk_requests_users FOREIGN KEY(user_id) REFERENCES users(user_id)
)^;

CREATE TABLE IF NOT EXISTS compilations (
    compilation_id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    title VARCHAR(100) NOT NULL,
    pinned BOOLEAN,
    version BIGINT,
    CONSTRAINT pk_compilations PRIMARY KEY(compilation_id)
)^;

CREATE TABLE IF NOT EXISTS compilations_events (
    compilation_id BIGINT NOT NULL,
    event_id BIGINT NOT NULL,
    version BIGINT,
    CONSTRAINT pk_compilations_events PRIMARY KEY(compilation_id, event_id),
    CONSTRAINT fk_compilations_events_events FOREIGN KEY(event_id) REFERENCES events(event_id),
    CONSTRAINT fk_compilations_events_compilations FOREIGN KEY(compilation_id) REFERENCES compilations(compilation_id)
)^;

CREATE TABLE IF NOT EXISTS locations (
    location_id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    lat FLOAT NOT NULL,
    lon FLOAT NOT NULL,
    radius FLOAT NOT NULL,
    location_name VARCHAR(200) UNIQUE NOT NULL,
    location_description VARCHAR(1000) NOT NULL,
    location_type VARCHAR(50) NOT NULL,
    location_country VARCHAR(200),
    location_state VARCHAR(200),
    location_city VARCHAR(200),
    location_street VARCHAR(400),
    location_housenumber VARCHAR(100),
    location_postcode VARCHAR(50),
    resolved BOOLEAN NOT NULL,
    resolve_date TIMESTAMP,
    version BIGINT,
    CONSTRAINT locations_pk PRIMARY KEY(location_id)
)^;

CREATE OR REPLACE FUNCTION distance(lat1 FLOAT, lon1 FLOAT, lat2 FLOAT, lon2 FLOAT)
    RETURNS FLOAT
AS
'
DECLARE
    dist float = 0;
    rad_lat1 float;
    rad_lat2 float;
    theta float;
    rad_theta float;
BEGIN
    IF lat1 = lat2 AND lon1 = lon2
    THEN
        RETURN dist;
    ELSE
        -- переводим градусы широты в радианы
        rad_lat1 = pi() * lat1 / 180;
        -- переводим градусы долготы в радианы
        rad_lat2 = pi() * lat2 / 180;
        -- находим разность долгот
        theta = lon1 - lon2;
        -- переводим градусы в радианы
        rad_theta = pi() * theta / 180;
        -- находим длину ортодромии
        dist = sin(rad_lat1) * sin(rad_lat2) + cos(rad_lat1) * cos(rad_lat2) * cos(rad_theta);

        IF dist > 1
            THEN dist = 1;
        END IF;

        dist = acos(dist);
        -- переводим радианы в градусы
        dist = dist * 180 / pi();
        -- переводим градусы в километры
        dist = dist * 60 * 1.8524;

        RETURN dist;
    END IF;
END;
'
LANGUAGE plpgsql^;